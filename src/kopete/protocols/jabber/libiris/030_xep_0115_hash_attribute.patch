Index: iris/xmpp/xmpp-im/xmpp_client.h
===================================================================
--- iris/xmpp/xmpp-im/xmpp_client.h	(revision 1328047)
+++ iris/xmpp/xmpp-im/xmpp_client.h	(working copy)
@@ -96,6 +96,7 @@
 		QString capsNode() const;
 		QString capsVersion() const;
 		QString capsExt() const;
+		QString capsHash() const;
 
 		void setOSName(const QString &);
 		void setTimeZone(const QString &, int);
@@ -103,6 +104,7 @@
 		void setClientVersion(const QString &);
 		void setCapsNode(const QString &);
 		void setCapsVersion(const QString &);
+		void setCapsHash(const QString &);
 
 		void setIdentity(DiscoItem::Identity);
 		DiscoItem::Identity identity();
Index: iris/xmpp/xmpp-im/xmpp_status.h
===================================================================
--- iris/xmpp/xmpp-im/xmpp_status.h	(revision 1328047)
+++ iris/xmpp/xmpp-im/xmpp_status.h	(working copy)
@@ -57,6 +57,7 @@
 		const QString & capsNode() const;
 		const QString & capsVersion() const;
 		const QString & capsExt() const;
+		const QString & capsHash() const;
 		
 		bool isMUC() const;
 		bool hasMUCItem() const;
@@ -83,6 +84,7 @@
 		void setCapsNode(const QString&);
 		void setCapsVersion(const QString&);
 		void setCapsExt(const QString&);
+		void setCapsHash(const QString&);
 		
 		void setMUC();
 		void setMUCItem(const MUCItem&);
@@ -111,7 +113,7 @@
 		QString v_xsigned;
 		// gabber song extension
 		QString v_songTitle;
-		QString v_capsNode, v_capsVersion, v_capsExt;
+		QString v_capsNode, v_capsVersion, v_capsExt, v_capsHash;
 
 		// MUC
 		bool v_isMUC, v_hasMUCItem, v_hasMUCDestroy;
Index: iris/xmpp/xmpp-im/xmpp_tasks.cpp
===================================================================
--- iris/xmpp/xmpp-im/xmpp_tasks.cpp	(revision 1328047)
+++ iris/xmpp/xmpp-im/xmpp_tasks.cpp	(working copy)
@@ -584,6 +584,8 @@
 			c.setAttribute("ver",s.capsVersion());
 			if (!s.capsExt().isEmpty()) 
 				c.setAttribute("ext",s.capsExt());
+			if (!s.capsHash().isEmpty())
+				c.setAttribute("hash",s.capsHash());
 			tag.appendChild(c);
 		}
 
@@ -745,6 +747,7 @@
  			p.setCapsNode(i.attribute("node"));
  			p.setCapsVersion(i.attribute("ver"));
  			p.setCapsExt(i.attribute("ext"));
+			p.setCapsHash(i.attribute("hash"));
   		}
 		else if(i.tagName() == "x" && i.attribute("xmlns") == "vcard-temp:x:update") {
 			QDomElement t;
Index: iris/xmpp/xmpp-im/client.cpp
===================================================================
--- iris/xmpp/xmpp-im/client.cpp	(revision 1328047)
+++ iris/xmpp/xmpp-im/client.cpp	(working copy)
@@ -129,7 +129,7 @@
 	int id_seed;
 	Task *root;
 	QString host, user, pass, resource;
-	QString osname, tzname, clientName, clientVersion, capsNode, capsVersion, capsExt;
+	QString osname, tzname, clientName, clientVersion, capsNode, capsVersion, capsExt, capsHash;
 	DiscoItem::Identity identity;
 	Features features;
 	QMap<QString,Features> extension_features;
@@ -159,6 +159,7 @@
 	d->capsNode = "";
 	d->capsVersion = "";
 	d->capsExt = "";
+	d->capsHash = "";
 
 	d->id_seed = 0xaaaa;
 	d->root = new Task(this, true);
@@ -1041,6 +1042,11 @@
 	return d->capsExt;
 }
 
+QString Client::capsHash() const
+{
+	return d->capsHash;
+}
+
 void Client::setOSName(const QString &name)
 {
 	d->osname = name;
@@ -1072,6 +1078,11 @@
 	d->capsVersion = s;
 }
 
+void Client::setCapsHash(const QString &s)
+{
+	d->capsHash = s;
+}
+
 DiscoItem::Identity Client::identity()
 {
 	return d->identity;
Index: iris/xmpp/xmpp-im/types.cpp
===================================================================
--- iris/xmpp/xmpp-im/types.cpp	(revision 1328047)
+++ iris/xmpp/xmpp-im/types.cpp	(working copy)
@@ -2174,6 +2174,11 @@
 	v_capsExt = _capsExt;
 }
 
+void Status::setCapsHash(const QString & _capsHash)
+{
+	v_capsHash = _capsHash;
+}
+
 void Status::setMUC() 
 {
 	v_isMUC = true;
@@ -2318,6 +2323,11 @@
 	return v_capsExt;
 }
 
+const QString & Status::capsHash() const
+{
+	return v_capsHash;
+}
+
 bool Status::isMUC() const
 {
 	return v_isMUC || !v_mucPassword.isEmpty() || hasMUCHistory();
