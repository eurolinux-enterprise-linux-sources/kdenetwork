Index: iris/xmpp/sasl/digestmd5proplist.cpp
===================================================================
--- iris/xmpp/sasl/digestmd5proplist.cpp	(révision 926384)
+++ iris/xmpp/sasl/digestmd5proplist.cpp	(copie de travail)
@@ -34,7 +34,7 @@
 
 QByteArray DIGESTMD5PropList::get(const QByteArray &var)
 {
-	for(ConstIterator it = begin(); it != end(); ++it) {
+	for(ConstIterator it = constBegin(); it != constEnd(); ++it) {
 		if((*it).var == var)
 			return (*it).val;
 	}
@@ -123,7 +123,7 @@
 int DIGESTMD5PropList::varCount(const QByteArray &var)
 {
 	int n = 0;
-	for(ConstIterator it = begin(); it != end(); ++it) {
+	for(ConstIterator it = constBegin(); it != constEnd(); ++it) {
 		if((*it).var == var)
 			++n;
 	}
Index: iris/xmpp/xmpp-im/filetransfer.cpp
===================================================================
--- iris/xmpp/xmpp-im/filetransfer.cpp	(révision 926384)
+++ iris/xmpp/xmpp-im/filetransfer.cpp	(copie de travail)
@@ -635,7 +635,7 @@
 
 		// must be one of the offered streamtypes
 		bool found = false;
-		for(QStringList::ConstIterator it = d->streamTypes.begin(); it != d->streamTypes.end(); ++it) {
+		for(QStringList::ConstIterator it = d->streamTypes.constBegin(); it != d->streamTypes.constEnd(); ++it) {
 			if((*it) == streamtype) {
 				found = true;
 				break;
Index: iris/xmpp/xmpp-im/xmpp_tasks.cpp
===================================================================
--- iris/xmpp/xmpp-im/xmpp_tasks.cpp	(révision 926384)
+++ iris/xmpp/xmpp-im/xmpp_tasks.cpp	(copie de travail)
@@ -420,7 +420,7 @@
 		QDomElement query = doc()->createElement("query");
 		query.setAttribute("xmlns", "jabber:iq:roster");
 		iq.appendChild(query);
-		for(QList<QDomElement>::ConstIterator it = d->itemList.begin(); it != d->itemList.end(); ++it)
+		for(QList<QDomElement>::ConstIterator it = d->itemList.constBegin(); it != d->itemList.constEnd(); ++it)
 			query.appendChild(*it);
 		send(iq);
 	}
@@ -438,7 +438,7 @@
 
 	QDomElement i = doc()->createElement("request");
 	i.setAttribute("type", "JT_Roster");
-	for(QList<QDomElement>::ConstIterator it = d->itemList.begin(); it != d->itemList.end(); ++it)
+	for(QList<QDomElement>::ConstIterator it = d->itemList.constBegin(); it != d->itemList.constEnd(); ++it)
 		i.appendChild(*it);
 	return lineEncode(Stream::xmlToString(i));
 	return "";
@@ -1464,7 +1464,7 @@
 
 			// Client-specific features
 			QStringList clientFeatures = client()->features().list();
-			for (QStringList::ConstIterator i = clientFeatures.begin(); i != clientFeatures.end(); ++i) {
+			for (QStringList::ConstIterator i = clientFeatures.constBegin(); i != clientFeatures.constEnd(); ++i) {
 				feature = doc()->createElement("feature");
 				feature.setAttribute("var", *i);
 				query.appendChild(feature);
@@ -1473,7 +1473,7 @@
 			if (node.isEmpty()) {
 				// Extended features
 				QStringList exts = client()->extensions();
-				for (QStringList::ConstIterator i = exts.begin(); i != exts.end(); ++i) {
+				for (QStringList::ConstIterator i = exts.constBegin(); i != exts.constEnd(); ++i) {
 					const QStringList& l = client()->extension(*i).list();
 					for ( QStringList::ConstIterator j = l.begin(); j != l.end(); ++j ) {
 						feature = doc()->createElement("feature");
Index: iris/xmpp/xmpp-im/s5b.cpp
===================================================================
--- iris/xmpp/xmpp-im/s5b.cpp	(révision 926384)
+++ iris/xmpp/xmpp-im/s5b.cpp	(copie de travail)
@@ -1214,7 +1214,7 @@
 	S5BServer *serv = m->server();
 	if(serv && serv->isActive() && !haveHost(in_hosts, m->client()->jid())) {
 		QStringList hostList = serv->hostList();
-		for(QStringList::ConstIterator it = hostList.begin(); it != hostList.end(); ++it) {
+		for(QStringList::ConstIterator it = hostList.constBegin(); it != hostList.constEnd(); ++it) {
 			StreamHost h;
 			h.setJid(m->client()->jid());
 			h.setHost(*it);
@@ -1252,7 +1252,7 @@
 	StreamHostList list;
 	if(lateProxy) {
 		// take just the proxy streamhosts
-		for(StreamHostList::ConstIterator it = in_hosts.begin(); it != in_hosts.end(); ++it) {
+		for(StreamHostList::ConstIterator it = in_hosts.constBegin(); it != in_hosts.constEnd(); ++it) {
 			if((*it).isProxy())
 				list += *it;
 		}
@@ -1263,7 +1263,7 @@
 		if((state == Initiator || (state == Target && fast)) && !proxy.jid().isValid()) {
 			// take just the non-proxy streamhosts
 			bool hasProxies = false;
-			for(StreamHostList::ConstIterator it = in_hosts.begin(); it != in_hosts.end(); ++it) {
+			for(StreamHostList::ConstIterator it = in_hosts.constBegin(); it != in_hosts.constEnd(); ++it) {
 				if((*it).isProxy())
 					hasProxies = true;
 				else
Index: iris/xmpp/xmpp-im/xmpp_address.h
===================================================================
--- iris/xmpp/xmpp-im/xmpp_address.h	(révision 926384)
+++ iris/xmpp/xmpp-im/xmpp_address.h	(copie de travail)
@@ -61,6 +61,6 @@
 	};
 
 	typedef QList<Address> AddressList;
-};
+}
 	
 #endif
Index: iris/xmpp/xmpp-im/types.cpp
===================================================================
--- iris/xmpp/xmpp-im/types.cpp	(révision 926384)
+++ iris/xmpp/xmpp-im/types.cpp	(copie de travail)
@@ -1411,7 +1411,7 @@
 		s.setLang(d->lang);
 
 	StringMap::ConstIterator it;
-	for(it = d->subject.begin(); it != d->subject.end(); ++it) {
+	for(it = d->subject.constBegin(); it != d->subject.constEnd(); ++it) {
 		const QString &str = (*it);
 		if(!str.isEmpty()) {
 			QDomElement e = s.createTextElement(s.baseNS(), "subject", str);
@@ -1420,7 +1420,7 @@
 			s.appendChild(e);
 		}
 	}
-	for(it = d->body.begin(); it != d->body.end(); ++it) {
+	for(it = d->body.constBegin(); it != d->body.constEnd(); ++it) {
 		const QString &str = (*it);
 		if(!str.isEmpty()) {
 			QDomElement e = s.createTextElement(s.baseNS(), "body", str);
@@ -1447,7 +1447,7 @@
 	}
 
 	// urls
-	for(QList<Url>::ConstIterator uit = d->urlList.begin(); uit != d->urlList.end(); ++uit) {
+	for(QList<Url>::ConstIterator uit = d->urlList.constBegin(); uit != d->urlList.constEnd(); ++uit) {
 		QDomElement x = s.createElement("jabber:x:oob", "x");
 		x.appendChild(s.createTextElement("jabber:x:oob", "url", (*uit).url()));
 		if(!(*uit).desc().isEmpty())
@@ -1466,7 +1466,7 @@
 				x.appendChild(s.createTextElement("jabber:x:event","id",d->eventId));
 		}
 
-		for(QList<MsgEvent>::ConstIterator ev = d->eventList.begin(); ev != d->eventList.end(); ++ev) {
+		for(QList<MsgEvent>::ConstIterator ev = d->eventList.constBegin(); ev != d->eventList.constEnd(); ++ev) {
 			switch (*ev) {
 				case OfflineEvent:
 					x.appendChild(s.createElement("jabber:x:event", "offline"));
Index: iris/xmpp/xmpp-im/client.cpp
===================================================================
--- iris/xmpp/xmpp-im/client.cpp	(révision 926384)
+++ iris/xmpp/xmpp-im/client.cpp	(copie de travail)
@@ -354,7 +354,7 @@
 {
 	Jid jid(room + "@" + host);
 	bool found = false;
-	for(QList<GroupChat>::ConstIterator it = d->groupChatList.begin(); it != d->groupChatList.end(); it++) {
+	for(QList<GroupChat>::ConstIterator it = d->groupChatList.constBegin(); it != d->groupChatList.constEnd(); it++) {
 		const GroupChat &i = *it;
 		if(i.j.compare(jid, false)) {
 			found = true;
Index: iris/xmpp/cutestuff/socks.cpp
===================================================================
--- iris/xmpp/cutestuff/socks.cpp	(révision 926384)
+++ iris/xmpp/cutestuff/socks.cpp	(copie de travail)
@@ -284,7 +284,7 @@
 		int at = 0;
 		quint16 c;
 		bool ok;
-		for(QStringList::ConstIterator it = s6.begin(); it != s6.end(); ++it) {
+		for(QStringList::ConstIterator it = s6.constBegin(); it != s6.constEnd(); ++it) {
 			c = (*it).toInt(&ok, 16);
 			a6[at++] = (c >> 8);
 			a6[at++] = c & 0xff;
Index: iris/xmpp/cutestuff/httppoll.cpp
===================================================================
--- iris/xmpp/cutestuff/httppoll.cpp	(révision 926384)
+++ iris/xmpp/cutestuff/httppoll.cpp	(copie de travail)
@@ -510,7 +510,7 @@
 
 QString HttpProxyPost::getHeader(const QString &var) const
 {
-	for(QStringList::ConstIterator it = d->headerLines.begin(); it != d->headerLines.end(); ++it) {
+	for(QStringList::ConstIterator it = d->headerLines.constBegin(); it != d->headerLines.constEnd(); ++it) {
 		const QString &s = *it;
 		int n = s.indexOf(": ");
 		if(n == -1)
@@ -752,7 +752,7 @@
 
 QString HttpProxyGetStream::getHeader(const QString &var) const
 {
-	for(QStringList::ConstIterator it = d->headerLines.begin(); it != d->headerLines.end(); ++it) {
+	for(QStringList::ConstIterator it = d->headerLines.constBegin(); it != d->headerLines.constEnd(); ++it) {
 		const QString &s = *it;
 		int n = s.indexOf(": ");
 		if(n == -1)
Index: iris/xmpp/xmpp-core/protocol.cpp
===================================================================
--- iris/xmpp/xmpp-core/protocol.cpp	(révision 926384)
+++ iris/xmpp/xmpp-core/protocol.cpp	(copie de travail)
@@ -404,7 +404,7 @@
 	// HACK: using attributes seems to be the only way to get additional namespaces in here
 	if(!defns.isEmpty())
 		e.setAttribute("xmlns", defns);
-	for(QStringList::ConstIterator it = list.begin(); it != list.end();) {
+	for(QStringList::ConstIterator it = list.constBegin(); it != list.constEnd();) {
 		QString prefix = *(it++);
 		QString uri = *(it++);
 		e.setAttribute(QString("xmlns:") + prefix, uri);
@@ -1267,7 +1267,7 @@
 		}
 		else {
 			QDomElement mechs = doc.createElementNS(NS_SASL, "mechanisms");
-			for(QStringList::ConstIterator it = sasl_mechlist.begin(); it != sasl_mechlist.end(); ++it) {
+			for(QStringList::ConstIterator it = sasl_mechlist.constBegin(); it != sasl_mechlist.constEnd(); ++it) {
 				QDomElement m = doc.createElement("mechanism");
 				m.appendChild(doc.createTextNode(*it));
 				mechs.appendChild(m);
Index: iris/xmpp/xmpp-core/xmpp.h
===================================================================
--- iris/xmpp/xmpp-core/xmpp.h	(révision 926384)
+++ iris/xmpp/xmpp-core/xmpp.h	(copie de travail)
@@ -37,7 +37,7 @@
 namespace QCA
 {
 	class TLS;
-};
+}
 
 #ifndef CS_XMPP
 class ByteStream;
@@ -235,6 +235,6 @@
 		class Private;
 		Private *d;
 	};
-};
+}
 
 #endif
Index: iris/xmpp/xmpp-core/stream.cpp
===================================================================
--- iris/xmpp/xmpp-core/stream.cpp	(révision 926384)
+++ iris/xmpp/xmpp-core/stream.cpp	(copie de travail)
@@ -910,7 +910,7 @@
 #endif
 		bool ok = d->client.processStep();
 		// deal with send/received items
-		for(QList<XmlProtocol::TransferItem>::ConstIterator it = d->client.transferItemList.begin(); it != d->client.transferItemList.end(); ++it) {
+		for(QList<XmlProtocol::TransferItem>::ConstIterator it = d->client.transferItemList.constBegin(); it != d->client.transferItemList.constEnd(); ++it) {
 			const XmlProtocol::TransferItem &i = *it;
 			if(i.isExternal)
 				continue;
Index: iris/xmpp/xmpp-core/parser.cpp
===================================================================
--- iris/xmpp/xmpp-core/parser.cpp	(révision 926384)
+++ iris/xmpp/xmpp-core/parser.cpp	(copie de travail)
@@ -603,9 +603,9 @@
 
 QString Parser::Event::nsprefix(const QString &s) const
 {
-	QStringList::ConstIterator it = d->nsnames.begin();
-	QStringList::ConstIterator it2 = d->nsvalues.begin();
-	for(; it != d->nsnames.end(); ++it) {
+	QStringList::ConstIterator it = d->nsnames.constBegin();
+	QStringList::ConstIterator it2 = d->nsvalues.constBegin();
+	for(; it != d->nsnames.constEnd(); ++it) {
 		if((*it) == s)
 			return (*it2);
 		++it2;
Index: iris/irisnet/corelib/netinterface_unix.cpp
===================================================================
--- iris/irisnet/corelib/netinterface_unix.cpp	(révision 926384)
+++ iris/irisnet/corelib/netinterface_unix.cpp	(copie de travail)
@@ -318,7 +318,7 @@
 class UnixNet : public NetInterfaceProvider
 {
 	Q_OBJECT
-	Q_INTERFACES(XMPP::NetInterfaceProvider);
+	Q_INTERFACES(XMPP::NetInterfaceProvider)
 public:
 	QList<Info> info;
 	QTimer t;
@@ -406,7 +406,7 @@
 class UnixNetProvider : public IrisNetProvider
 {
 	Q_OBJECT
-	Q_INTERFACES(XMPP::IrisNetProvider);
+	Q_INTERFACES(XMPP::IrisNetProvider)
 public:
 	virtual NetInterfaceProvider *createNetInterfaceProvider()
 	{
Index: iris/irisnet/corelib/jdnsshared.cpp
===================================================================
--- iris/irisnet/corelib/jdnsshared.cpp	(révision 926384)
+++ iris/irisnet/corelib/jdnsshared.cpp	(copie de travail)
@@ -416,7 +416,7 @@
 		None,            // don't muck with anything
 		FillInAddress,   // for A/AAAA
 		FillInPtrOwner6, // for PTR, IPv6
-		FillInPtrOwner4, // for PTR, IPv4
+		FillInPtrOwner4 // for PTR, IPv4
 	};
 
 	JDnsShared *q;
Index: iris/irisnet/appledns/appledns.cpp
===================================================================
--- iris/irisnet/appledns/appledns.cpp	(révision 926384)
+++ iris/irisnet/appledns/appledns.cpp	(copie de travail)
@@ -237,7 +237,7 @@
 class AppleProvider : public XMPP::IrisNetProvider
 {
 	Q_OBJECT
-	Q_INTERFACES(XMPP::IrisNetProvider);
+	Q_INTERFACES(XMPP::IrisNetProvider)
 public:
 	QDnsSd dns;
 	QHash<int,QDnsSdDelegate*> delegateById;
